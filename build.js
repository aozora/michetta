// import { createApp } from './app';

const fs = require('fs');
const path = require('path');
const resolve = file => path.resolve(__dirname, file);
// const Vue = require('vue')
// const globby = require('globby');
const webpack = require('webpack');
const express = require('express');

// const contextData = require('./src/data/context')
const { createBundleRenderer } = require('vue-server-renderer');

const isProd = process.env.NODE_ENV === 'production';

let renderer;
let readyPromise;
const templatePath = resolve('./src/layout/layout.html');
const template = fs.readFileSync(templatePath, 'utf-8');
const bundle = path.join(__dirname, '/dist/vue-ssr-server-bundle.json');
const serverConfig = require('./webpack.server.config');
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

const app = express();

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    // cache: LRU({
    //   max: 1000,
    //   maxAge: 1000 * 60 * 15
    // }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}


// watch and update server renderer
// const serverCompiler = webpack(serverConfig)
//
// const mfs = new MFS()
// serverCompiler.outputFileSystem = mfs
// serverCompiler.watch({}, (err, stats) => {
//   if (err) throw err
//   stats = stats.toJson()
//   if (stats.errors.length) return
//
//   // read bundle generated by vue-ssr-webpack-plugin
//   bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
//   update()
// })


// isProd
renderer = createRenderer(bundle, {
  template
  // clientManifest
});


// function getPages() {
//   return globby.sync('src/pages/**/*.vue', {})
// }
//
//
// const pages = getPages();
//
// pages.forEach((page) => {
//   const fileName = path.basename(page)
//   const fileNameNoExt = fileName.substr(0, fileName.indexOf('.vue'))
//   console.log(`page: ${fileNameNoExt}`)
//
//   contextData.url = fileNameNoExt === 'index' ? '/' : `/${fileNameNoExt}`


const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
});

// app.use(compression({ threshold: 0 }))
// app.use(favicon('./public/logo-48.png'))
app.use('/dist', serve('./dist', true));
// app.use('/public', serve('./public', true))
// app.use('/manifest.json', serve('./manifest.json', true))
// app.use('/service-worker.js', serve('./dist/service-worker.js'))


function render(req, res) {
  const s = Date.now();

  res.setHeader('Content-Type', 'text/html');
  res.setHeader('Server', serverInfo);

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url);
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found');
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error');
      console.error(`error during render : ${req.url}`);
      console.error(err.stack);
    }
  };

  const context = {
    title: 'Michetta Static Site Generator', // default title
    url: req.url
  };

  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err);
    }

    res.send(html);

    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`);
    }
  })
}


app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res));
});

const port = process.env.PORT || 8080;
app.listen(port, () => {
  console.log(`server started at localhost:${port}`);
});


//
// webpack(serverConfig, function (err, stats) {
//   if (err) {
//     throw err
//   }
//
//   console.log('[webpack:build]', stats.toString({
//     colors: true
//   }));
//
//   const renderer = createBundleRenderer(bundle, {
//     runInNewContext: false, // recommended
//     template: template, // (optional) page template
//     // clientManifest // (optional) client build manifest
//   })
//
//   // Step 3: Render the Vue instance to HTML
//   // in 2.5.0+, returns a Promise if no callback is passed:
//   renderer.renderToString(contextData).then(html => {
//     // write the html
//     fs.writeFileSync(path.resolve(`./dist/${fileNameNoExt}.html`), html, 'utf-8')
//   }).catch(err => {
//     console.error(err)
//   })
// });
//
//
